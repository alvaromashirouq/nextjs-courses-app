{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alvaro.martinez/training/nextjs-courses-app/pages/[meetupId]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, _objectSpread({}, props.meetupData), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://alvaromashiro:C7aR2HIEIPPCDkvf@cluster0.bwryvdh.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetups');\n  const result = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  console.log(result);\n  client.close();\n  return {\n    fallback: false,\n    paths: result.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://alvaromashiro:C7aR2HIEIPPCDkvf@cluster0.bwryvdh.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetups');\n  const result = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(result);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: result._id.toString(),\n        title: result.title,\n        address: result.address,\n        description: result.description,\n        image: result.image\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/alvaro.martinez/training/nextjs-courses-app/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","Head","MeetupDetails","props","meetupData","getStaticPaths","client","connect","db","meetupCollection","collection","result","find","_id","toArray","console","log","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","findOne","id","title","address","description","image"],"mappings":";;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD,oBAAkBA,KAAK,CAACC,UAAxB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAPD;;AASA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,+GADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,MAAM,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAArB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AAEAL,EAAAA,MAAM,CAACW,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAER,MAAM,CAACS,GAAP,CAAYC,MAAD,KAAa;AAC7BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACR,GAAP,CAAWW,QAAX;AAAZ;AADqB,KAAb,CAAX;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMjB,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,+GADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,MAAM,GAAG,MAAMF,gBAAgB,CAACkB,OAAjB,CAAyB;AAAEd,IAAAA,GAAG,EAAEd,QAAQ,CAACwB,QAAD;AAAf,GAAzB,CAArB;AAEAR,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AAEAL,EAAAA,MAAM,CAACW,KAAP;AAEA,SAAO;AACLd,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVwB,QAAAA,EAAE,EAAEjB,MAAM,CAACE,GAAP,CAAWW,QAAX,EADM;AAEVK,QAAAA,KAAK,EAAElB,MAAM,CAACkB,KAFJ;AAGVC,QAAAA,OAAO,EAAEnB,MAAM,CAACmB,OAHN;AAIVC,QAAAA,WAAW,EAAEpB,MAAM,CAACoB,WAJV;AAKVC,QAAAA,KAAK,EAAErB,MAAM,CAACqB;AALJ;AADP;AADF,GAAP;AAWD;AAED,eAAe9B,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\n\nconst MeetupDetails = (props) => {\n  return (\n    <>\n      <Head></Head>\n      <MeetupDetail {...props.meetupData} />\n    </>\n  );\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://alvaromashiro:C7aR2HIEIPPCDkvf@cluster0.bwryvdh.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const db = client.db();\n\n  const meetupCollection = db.collection('meetups');\n\n  const result = await meetupCollection.find({}, { _id: 1 }).toArray();\n\n  console.log(result);\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: result.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() }\n    }))\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\n    'mongodb+srv://alvaromashiro:C7aR2HIEIPPCDkvf@cluster0.bwryvdh.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const db = client.db();\n\n  const meetupCollection = db.collection('meetups');\n\n  const result = await meetupCollection.findOne({ _id: ObjectId(meetupId) });\n\n  console.log(result);\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: result._id.toString(),\n        title: result.title,\n        address: result.address,\n        description: result.description,\n        image: result.image\n      }\n    }\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}